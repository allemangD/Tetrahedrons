#version 430

layout(std430, binding=1) buffer PentVerts
{
    vec4 pentVerts[];
};

layout(std430, binding=2) buffer PentInds
{
    int pentInds[];
};

layout(std430, binding=3) buffer HullVerts
{
    vec4 hullVerts[];
};

layout(std430, binding=4) buffer HullInds
{
    int hullInds[];
};

layout(std430, binding=5) buffer Transform
{
    mat4 rotate;
    vec4 pivot;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    int iid = int(gl_GlobalInvocationID.x);
    
    int pi0 = iid * 5;
    int hv0 = iid * 6;
    int hi0 = iid * 24;
    
    // use range [19:] as lengths for sub arrays
    // re-use hullInds as multidim array for faces
    
    for(int i = 0; i < 24; i++)
        hullInds[hi0 + i] = 0;
    
    int vi = 0;  // vert index
    int ii = 0;  // inds index

    for(int i = 0; i < 5; i++)
    for(int j = i + 1; j < 5; j++)
    {
        vec4 a = (pentVerts[pentInds[pi0 + i]] - pivot) * rotate; 
        vec4 b = (pentVerts[pentInds[pi0 + j]] - pivot) * rotate;
        
        if (a.w * b.w < 0) // different sides
        {
            float alph = a.w / (a.w - b.w);
            vec4 p = a + alph * (b - a);
            
            hullVerts[hv0 + vi] = p + pivot;
            
            hullInds[hi0 + 23 - 2 * vi] = i;
            hullInds[hi0 + 22 - 2 * vi] = j;
            
            vi++;
        }
    }
    
    if (vi == 4)  // points form a tetrahedron
    {
//        for(int i =     0; i < 5; i++)
//        for(int j = i + 1; j < 5; j++)
//        for(int k = j + 1; j < 5; j++)
//        {
//            hullInds[hi0 + ii++] = i;
//            hullInds[hi0 + ii++] = j;
//            hullInds[hi0 + ii++] = k;
//        }
    }
    else if (vi == 6) {  // points form a triangular prism
        for(int i = 0; i < 6; i++)
        for(int j = i + 1; j < 6; j++)
        for(int k = j + 1; k < 6; k++)
        {
            
        }
    }
    
    while (vi < 6)
        hullVerts[hv0 + vi++] = vec4(0);
        
    while (ii < 24)
        hullInds[hi0 + ii++] = 0;
        
}
