#version 430

layout(std430, binding=1) buffer PentVerts
{
    vec4 pentVerts[];
};

layout(std430, binding=2) buffer PentInds
{
    int pentInds[];
};

layout(std430, binding=3) buffer HullVerts
{
    vec4 hullVerts[];
};

layout(std430, binding=4) buffer HullFaceInds
{
    int hullFaceInds[];
};

layout(std430, binding=5) buffer HullEgdeInds
{
    int hullEdgeInds[];
};

layout(std430, binding=6) buffer Transform
{
    mat4 rotate;
    vec4 pivot;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    int iid = int(gl_GlobalInvocationID.x);
    
    int pi0 = iid * 5;
    int hv0 = iid * 6;
    int hi0 = iid * 24;
    int he0 = iid * 18;
    
    for(int i = 0; i < 24; i++)
        hullFaceInds[hi0 + i] = 0;
        
    for(int i = 0; i < 18; i++)
        hullEdgeInds[he0 + i] = 0;
    
    int vi = 0;  // vert index
    int fi = 0;  // face inds index
    int ei = 0;  // edge inds index

    for(int i = 0; i < 5; i++)
    for(int j = i + 1; j < 5; j++)
    {
        vec4 a = (pentVerts[pentInds[pi0 + i]] - pivot) * rotate; 
        vec4 b = (pentVerts[pentInds[pi0 + j]] - pivot) * rotate;
        
        if (a.w * b.w < 0) // different sides
        {
            float alph = a.w / (a.w - b.w);
            vec4 p = a + alph * (b - a);
            
            hullVerts[hv0 + vi] = p + pivot;
            
            hullFaceInds[hi0 + 23 - 2 * vi] = i;
            hullFaceInds[hi0 + 22 - 2 * vi] = j;
            
            vi++;
        }
    }
    
    
    if (vi == 4)  // points form a tetrahedron
    {
        for(int i =     0; i < 4; i++)
        for(int j = i + 1; j < 4; j++)
        for(int k = j + 1; k < 4; k++)
        {
            hullFaceInds[hi0 + fi++] = hv0 + i;
            hullFaceInds[hi0 + fi++] = hv0 + j;
            hullFaceInds[hi0 + fi++] = hv0 + k;
        }

        for(int i =     0; i < 4; i++)
        for(int j = i + 1; j < 4; j++)
        {
            hullEdgeInds[hi0 + ei++] = hv0 + i;
            hullEdgeInds[hi0 + ei++] = hv0 + j;
        }        
    }
    else if (vi == 6) {  // points form a triangular prism
        for(int f = 0; f < 5; f++)
        {
            for(int i = 0; i < 4; i++)
            for(int j = i + 1; j < 5; j++)
            for(int k = j + 1; k < 6; k++)
            if (
                (hullFaceInds[hi0 + 23 - 2 * i] == f ||
                 hullFaceInds[hi0 + 22 - 2 * i] == f) &&
                (hullFaceInds[hi0 + 23 - 2 * j] == f ||
                 hullFaceInds[hi0 + 22 - 2 * j] == f) &&
                (hullFaceInds[hi0 + 23 - 2 * k] == f ||
                 hullFaceInds[hi0 + 22 - 2 * k] == f))
            {
                hullFaceInds[hi0 + fi++] = hv0 + i;
                hullFaceInds[hi0 + fi++] = hv0 + j;
                hullFaceInds[hi0 + fi++] = hv0 + k;
                
                hullEdgeInds[he0 + ei++] = hv0 + i;
                hullEdgeInds[he0 + ei++] = hv0 + j;
                hullEdgeInds[he0 + ei++] = hv0 + j;
                hullEdgeInds[he0 + ei++] = hv0 + k;
                hullEdgeInds[he0 + ei++] = hv0 + k;
                hullEdgeInds[he0 + ei++] = hv0 + i;
            }
        }
            
        for (int i = 0; i < 3; i++)
        {
            int a = hullFaceInds[hi0 + i];
            int b = hullFaceInds[hi0 + (1 + i) % 3];
            int c = hullFaceInds[hi0 + 3 + i];
            int d = hullFaceInds[hi0 + 3 + (1 + i) % 3];
            
            hullFaceInds[hi0 + fi++] = c;
            hullFaceInds[hi0 + fi++] = a;
            hullFaceInds[hi0 + fi++] = b;
            hullFaceInds[hi0 + fi++] = b;
            hullFaceInds[hi0 + fi++] = d;
            hullFaceInds[hi0 + fi++] = c;
            
            hullEdgeInds[he0 + ei++] = a;
            hullEdgeInds[he0 + ei++] = c;
        }
    }
        
    while (vi < 6)
        hullVerts[hv0 + vi++] = vec4(0);
        
    while (fi < 24)
        hullFaceInds[hi0 + fi++] = 0;
        
    while (ei < 18)
        hullEdgeInds[he0 + ei++] = 0;
        
}
